!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),l=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:O.s(this.$y,4,"0"),M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));
window.addEventListener('bridgeInitializeStart', function (event) {
    const gb = event.detail.guideBridge;
    gb.connect(CepForms.afterCreation);
});

window.addEventListener('resize', function () {
    if (window.guideBridge && window.guideBridge.isGuideLoaded) {
        CepForms.afterResize();
    }
});

const CepForms = {
    dateFormat: 'DD/MM/YYYY',

    /**
     * Function invoked right after initialization of form.
     * @private
     */
    afterCreation: function () {
        CepForms.reformatTermsAndConditions();
        CepForms.readDateFormat();
    },

    /**
     * Function invoked after window resize.
     * @private
     */
    afterResize: function () {
        CepForms.removeFixedHeightFromTermsAndConditions();
    },

    /**
     * Reformats text in all Terms and Conditions components.
     * @private
     */
    reformatTermsAndConditions: function () {
        CepUtils.findComponentsByClass('guideTermsAndConditions').forEach(function (component) {
            CepForms.reformatTermsAndConditionsComponent(component);
        });
    },

    /**
     * Reads date format from form configuration.
     * @private
     */
    readDateFormat: function () {
        const component = CepUtils.findComponentByName('__date_format');
        if (component) {
            CepForms.dateFormat = component.value || 'DD/MM/YYYY';
        }
    },

    /**
     * Removes fixed height from all Terms and Conditions components.
     * @private
     */
    removeFixedHeightFromTermsAndConditions: function () {
        CepUtils.findComponentsByClass('guideTermsAndConditions').forEach(function (component) {
            CepForms.removeFixedHeightFromTermsAndConditionsComponent(component);
        });
    },

    /**
     * Returns data from guide bridge
     * @returns {formData} form data
     * @private
     */
    getFormData: function () {
        var formData = null;
        guideBridge.getFormDataString({
            success: function (response) {
                const result = JSON.parse(response.data);
                if (result && result.afData) {
                    formData = Object.assign({}, result.afData.afBoundData.data, result.afData.afUnboundData.data);
                }
            },
        });
        if (formData === null) {
            throw new Error('Can not fetch form data');
        }
        return formData;
    },

    /**
     * Returns form configuration stored in markup
     * @param form
     * @returns {formConfig} form config
     * @private
     */
    getFormConfig: function (form) {
        const formConfigElement = form.parents('.aemform').children('.aemform-configuration');
        if (formConfigElement.length > 0) {
            const formConfigJson = JSON.parse(formConfigElement.html());
            return Object.assign({}, formConfigJson, formConfigElement.data());
        }
        console.warn('Form configuration not found');
        return {};
    },

    /**
     * Method to get the API config data
     * @returns {apiConfig} API config
     * @private
     */
    getApiConfig: function (formData) {
        const submitUrl = formData['submit_url'];
        const configPayload = {
            bucket_name: formData['bucket_name'],
            form_path: formData['form_path'],
            template_path: formData['template_path'],
        };
        return { submitUrl: submitUrl, configPayload: configPayload };
    },

    /**
     * Returns date string formatted to "en-US" format
     * @param {date} date string to parse
     * @private
     */
    formatDate: function (date) {
        return dayjs(date).format(CepForms.dateFormat);
    },

    /**
     * Transforms data entered in form
     * @param {form} formData Form object
     * @private
     */
    transformFormData: function (formData) {
        const result = {};
        const allComponentsList = CepUtils.getAllComponents();

        for (var property in formData) {
            if (property.startsWith('__')) {
                // private property
                continue;
            }
            if (CepUtils.allComponentsAreInHiddenPanel(property, allComponentsList)) {
                // property is in hidden panel
                continue;
            }
            if (property.startsWith('_')) {
                // form rules don't work properly with field names starting with digit
                // if you need such a name, add the prefix '_' to the name, and it will be removed here
                CepForms.transformProperty(result, property.substring(1), formData[property]);
            } else {
                CepForms.transformProperty(result, property, formData[property]);
            }
        }
        return result;
    },

    /**
     * Transform data from single form field
     * @private
     */
    transformProperty: function (result, property, originalValue) {
        const component = CepUtils.findComponentByName(property);
        var value = originalValue;
        if (component && component.className === 'guideDatePicker') {
            value = CepForms.formatDate(originalValue);
        }

        const [key, label] = property.split('__', 2);
        if (label) {
            value = (result[key] || '') + label.replace('_', ' ') + ': ' + value + ' \n';
        } else if (key === 'g-recaptcha-response') {
            value = value.g_recaptcha_response;
        } else if (value.reviewStatus && value.reviewStatus === 'true') {
            value = component ? component.jsonModel.tncCheckBoxContent : true;
        }
        result[key] = value;
    },

    /**
     * Method to send data to the API
     * @private
     */
    sendToApi: function (apiUrl, apiData) {
        const payload = JSON.stringify(apiData);
        return fetch(apiUrl, {
            method: 'POST',
            body: payload,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    },

    /**
     * Method to show the results panel after submit action
     * @param isError boolean - show the error panel if there is an error
     * @param scope
     * @param formConfig
     * @private
     */
    showResultPanel: function (isError, scope, formConfig) {
        const isNotBlank = function (text) {
            return text && text !== '';
        };
        scope.error_message.visible = isError;
        if (!isError) {
            if (isNotBlank(formConfig.thankYouPage)) {
                window.location.href = formConfig.thankYouPage;
            } else {
                if (isNotBlank(formConfig.thankYouMessage) && scope.success_message) {
                    scope.success_message.value = formConfig.thankYouMessage;
                }
                scope.panel_success.visible = true;
                scope.panel_main.visible = false;
            }
        }
    },

    /**
     * Method to correctly format the Terms and Conditions text
     * @param component Terms and Conditions component
     * @private
     */
    reformatTermsAndConditionsComponent: function (component) {
        const linkedTexts = component.jsonModel.linkText;
        const termsPolicyElementSelector = '.'.concat(component.name);
        const termsPolicyElement = document.querySelector(termsPolicyElementSelector);
        var textContent = component.jsonModel.tncCheckBoxContent;

        textContent = CepUtils.replaceRegisteredSignByElement(textContent);
        linkedTexts.forEach(function (linkText) {
            const text = linkText.split('=')[0];
            const link = linkText.split('=')[1];
            textContent = CepUtils.replacePhraseByLink(textContent, link, text);
        });

        termsPolicyElement.querySelector('input').removeAttribute('disabled');
        termsPolicyElement.querySelector('.right label').innerHTML = textContent;
        termsPolicyElement.querySelector('.guide-tnc-link').style.display = 'none';
    },

    /**
     * Method removes fixed height from the Terms and Conditions
     * @param component Terms and Conditions component
     * @private
     */
    removeFixedHeightFromTermsAndConditionsComponent: function (component) {
        const termsPolicyElementSelector = '.'.concat(component.name);
        const termsPolicyElement = document.querySelector(termsPolicyElementSelector);

        termsPolicyElement.querySelector('.guide-tnc-checkbox').removeAttribute('style');
    },

    /**
     * Common Method for the forms submit action
     * @private
     */
    commonSubmitAction: function (scope, transformFormData) {
        const validationResults = guideBridge.validate();
        if (validationResults) {
            const submitButton = scope.$event.target || { enabled: true };
            submitButton.enabled = false;
            const form = $('#guideContainerForm');
            const formData = CepForms.getFormData();
            const formConfig = CepForms.getFormConfig(form);
            const apiConfig = CepForms.getApiConfig(formData);
            const transformedFormData = transformFormData(formData, scope);
            const apiData = Object.assign({}, apiConfig.configPayload, transformedFormData);
            const recaptchaData = CepUtils.getRecaptchaData();
            const sendFormDataObject = {
                submitUrl: apiConfig.submitUrl,
                apiData: apiData,
                scope: scope,
                formConfig: formConfig,
            };
            if (recaptchaData.rcVersion === 'enterprise') {
                sendFormDataObject.apiData['site-key'] = recaptchaData.rcSitekey;
                grecaptcha.enterprise.ready(function () {
                    const reCaptchaAction =
                        sendFormDataObject.apiData.prospectAccepted === '1' ? 'prospect_submit' : 'FORM_SEND';
                    const tokenPromise = grecaptcha.enterprise.execute(recaptchaData.rcSitekey, {
                        action: reCaptchaAction,
                    });
                    tokenPromise
                        .then(function (value) {
                            sendFormDataObject.apiData['g-recaptcha-response'] = value;
                            return CepForms.sendForm(sendFormDataObject);
                        })
                        .then(function () {
                            submitButton.enabled = true;
                        });
                });
            } else {
                CepForms.sendForm(sendFormDataObject).then(function () {
                    submitButton.enabled = true;
                });
            }
        }
    },

    /**
     * Common Method for sending payload from form to API
     * @private
     */
    sendForm: function (dataObject) {
        return CepForms.sendToApi(dataObject.submitUrl, dataObject.apiData).then(function (response) {
            const data = response.json();
            const isError = !response.ok || data.error;

            window.dispatchEvent(
                new CustomEvent('aem-forms-submit', {
                    detail: {
                        result: isError ? 'error' : 'success',
                    },
                })
            );
            CepForms.showResultPanel(isError, dataObject.scope, dataObject.formConfig);

            return response;
        });
    },
};

/**
 * Functions available in AEM Forms editor.
 */
const CepFunctions = {
    /**
     * Checks if the user meets the age requirements.
     * @this currentComponent
     * @name CepFunctions.validateAge CEP - Validate Age
     * @param {number} minAge min age
     * @return {boolean}
     */
    validateAge: function (minAge) {
        if (minAge) {
            const birthDate = Date.parse(this.value);
            const minDate = new Date();
            minDate.setFullYear(minDate.getFullYear() - minAge);
            return minDate > birthDate;
        }
        return true;
    },

    /**
     * Submits form using standard field transformer
     * @name CepFunctions.submitForm CEP - Submit form
     * @param {scope} scope form's scope
     */
    submitForm: function (scope) {
        CepForms.commonSubmitAction(scope, CepForms.transformFormData);
    },

    /**
     * Joins 2 strings
     * @name CepFunctions.concat2 CEP - Concat 2 Strings
     * @param {string} text1 string
     * @param {string} text2 string
     * @return {string}
     */
    concat2: function (text1, text2) {
        return (text1 || '') + (text2 || '');
    },

    /**
     * Joins 3 strings
     * @name CepFunctions.concat3 CEP - Concat 3 Strings
     * @param {string} text1 string
     * @param {string} text2 string
     * @param {string} text3 string
     * @return {string}
     */
    concat3: function (text1, text2, text3) {
        return CepFunctions.concat2(text1, text2) + (text3 || '');
    },

    /**
     * Joins 4 strings
     * @name CepFunctions.concat4 CEP - Concat 4 Strings
     * @param {string} text1 string
     * @param {string} text2 string
     * @param {string} text3 string
     * @param {string} text4 string
     * @return {string}
     */
    concat4: function (text1, text2, text3, text4) {
        return CepFunctions.concat3(text1, text2, text3) + (text4 || '');
    },

    /**
     * Joins 5 strings
     * @name CepFunctions.concat5 CEP - Concat 4 Strings
     * @param {string} text1 string
     * @param {string} text2 string
     * @param {string} text3 string
     * @param {string} text4 string
     * @param {string} text5 string
     * @return {string}
     */
    concat5: function (text1, text2, text3, text4, text5) {
        return CepFunctions.concat4(text1, text2, text3, text4) + (text5 || '');
    },
};

/**
 * Utility functions.
 */
const CepUtils = {
    /**
     * Replaces registered signs by HTML string in given text.
     * @param text text
     * @return {string}
     * @private
     */
    replaceRegisteredSignByElement: function (text) {
        const registeredSign = 'u00AE';
        const registeredElement = '<sup>' + decodeURIComponent('\u00AE') + '</sup>';
        return text.replace(registeredSign, registeredElement);
    },

    /**
     * Replaces phrase by link in given text.
     * @param text text
     * @param link link
     * @param phrase phrase
     * @return {string}
     * @private
     */
    replacePhraseByLink: function (text, link, phrase) {
        const anchor = '<a href="' + link + '" target="_blank">' + phrase + '</a>';
        return text.replace(phrase, anchor);
    },

    /**
     * Returns all components with given class.
     * @param className class name
     * @returns {[]} array with components
     * @private
     */
    findComponentsByClass: function (className) {
        return CepUtils.getAllComponents().filter(function (component) {
            return component.className === className;
        });
    },

    /**
     * Returns component with given name.
     * @param name name
     * @returns
     * @private
     */
    findComponentByName: function (name) {
        return CepUtils.getAllComponents().find(function (component) {
            return component.jsonModel.name === name;
        });
    },

    /**
     * Checks if all components with given name are in hidden panel.
     * @param name name
     * @param allComponentsList all components list (optional)
     * @returns
     * @private
     */
    allComponentsAreInHiddenPanel(name, allComponentsList) {
        var result = true;
        CepUtils.findAllComponentsByName(name, allComponentsList).forEach(function (component) {
            if (!CepUtils.isInHiddenPanel(component)) {
                result = false;
                return void 0;
            }
        });
        return result;
    },

    /**
     * Returns all components with given name. 'allComponentsList' parameter is optional
     * @param name name
     * @param allComponentsList all components list (optional)
     * @returns
     * @private
     */
    findAllComponentsByName: function (name, allComponentsList) {
        allComponentsList = allComponentsList || CepUtils.getAllComponents();

        return allComponentsList.filter(function (component) {
            return component.jsonModel.name === name;
        });
    },

    /**
     * Returns true if component's parent is in hidden field except 'hidden_fields' panel
     * @param component component
     * @returns
     * @private
     */
    isInHiddenPanel: function (component) {
        const parentComponent = component.parent;

        //All fields in 'hidden_fields' panel should be sent, so we treat entire panel as visible.
        if (parentComponent.jsonModel.name === 'hidden_fields' || parentComponent.jsonModel.name === 'guideRootPanel') {
            return false;
        } else {
            return parentComponent.visible ? CepUtils.isInHiddenPanel(parentComponent) : true;
        }
    },

    /**
     * Returns ReCaptcha data
     * @returns {} ReCaptcha data object
     * @private
     */
    getRecaptchaData: function () {
        const result =
            CepUtils.getAllComponents()
                .filter(function (component) {
                    return component.className === 'guideCaptcha';
                })
                .map(function (component) {
                    return component.jsonModel;
                })[0] || {};

        return result;
    },

    /**
     * Returns all components.
     * @returns {[]} array with components
     * @private
     */
    getAllComponents: function () {
        const result = [];
        const rootPanel = guideBridge.resolveNode('rootPanel');
        CepUtils.getDescendants(result, rootPanel);
        return result;
    },

    /**
     * Returns all descendants of given parent.
     * @param result
     * @param parent
     * @private
     */
    getDescendants: function (result, parent) {
        result.push(parent);
        for (var index in parent.children) {
            const child = parent.children[index];
            CepUtils.getDescendants(result, child);
        }
    },
};

window.addEventListener('bridgeInitializeStart', function (event) {
    const gb = event.detail.guideBridge;
    gb.connect(OneXpForms.afterCreation);
});

const OneXpForms = {
    /**
     * Function invoked right after initialization of form.
     * @private
     */
    afterCreation: function () {
        OneXpForms.fulfillCountryCodes();
    },
    /**
     * Submits Contact Us form
     * @name OneXpForms.contactUsSubmit OneXP - Submit Contact Us form
     * @param {scope} scope form's scope
     */
    contactUsSubmit: function (scope) {
        CepForms.commonSubmitAction(scope, CepForms.transformFormData);
    },
    /**
     * Submits DSR form
     * @name OneXpForms.dsrSubmit OneXP - Submit DSR form
     * @param {scope} scope form's scope
     */
    dsrSubmit: function (scope) {
        CepForms.commonSubmitAction(scope, OneXpForms.transformDsrFormData);
    },
    /**
     * Fetches country codes from server and injects them into drop down menu.
     * @private
     */
    fulfillCountryCodes: function () {
        const siteRegex = new RegExp("(?<langPath>(/content/\\w+)?/\\w{2}/\\w{2})(/.*)?");
        const countryCodeComponent = CepUtils.findComponentByName('__countryCode');
        const match = window.location.pathname.match(siteRegex);
        if (countryCodeComponent && match !== null) {
            const url = match.groups.langPath + '/configuration.countrycodes.json';
            $.getJSON(url).done(function (data) {
                countryCodeComponent.items = data.countryCodes;
            });
        }
    },
    /**
     * Transforms dsr from data to match the structure expected by the one trust api.
     * @private
     */
    transformDsrFormData: function (formData) {
        return OneXpForms.toDsrPayload(CepForms.transformFormData(formData));
    },

    /**
     * Map to dsr payload
     * @private
     */
    toDsrPayload: function (transformedFormData) {
        const data = Object.assign({}, transformedFormData);
        data.additionalData = {
            country: transformedFormData.country,
            formField69: transformedFormData.formField69,
            requestDetails: transformedFormData.requestDetails,
        };
        data.multiselectFields = {};
        data.attachments = null;
        data.requestTypes = [ transformedFormData.requestTypes ];
        data.subjectTypes = [ transformedFormData.subjectTypes ];
        return data;
    },
}
